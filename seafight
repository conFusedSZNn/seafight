from random import randint

class Exception(Exception):
    pass

class BoardOutException(Exception):
    def __str__(self):
        return "вы попали за поле!"

class BoardTwiceException(Exception):
    def __str__(self):
        return "вы сюда уже стреляли!!"

class BoardWrongShipException(Exception):
    pass


class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __eq__(self, other):
        return self.x == other.x and self.y == other.y

    def __repr__(self):
        return f"({self.x}, {self.y})"


class Ship:
    def __init__(self, lengh, r, o):
        self.lengh = lengh
        self.r = r
        self.o = o
        self.hp = r

    @property
    def dots(self):
        dotship_ = []
        for i in range(self.r):
            cur_x = self.lengh.x
            cur_y = self.lengh.y

            if self.o == 0:
                cur_x += i

            elif self.o == 1:
                cur_y += i

            dotship_.append(Dot(cur_x, cur_y))

        return dotship_

    def shoot(self, shot):
        return shot in self.dots


class Board:
    def __init__(self, hid=False, size=6):
        self.size = size
        self.hid = hid

        self.count = 0

        self.field = [["-"] * size for _ in range(size)]

        self.busy = []
        self.ships = []


    def __str__(self):
        result = ""
        result += "    1   2   3   4   5   6  "
        for i, row in enumerate(self.field):
            result += f"\n{i + 1} | " + " | ".join(row) + " |"

        if self.hid:
            result = result.replace("■", "-")
        return result

    def out(self, wtg):
        return not ((0 <= wtg.x < self.size) and (0 <= wtg.y < self.size))

    def add_ship(self, ship):

        for wtg in ship.dots:
            if self.out(wtg) or wtg in self.busy:
                raise BoardWrongShipException()
        for wtg in ship.dots:
            self.field[wtg.x][wtg.y] = "■"
            self.busy.append(wtg)

        self.ships.append(ship)
        self.contour(ship)

    def contour(self, ship, verb=False):
        nears = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]
        for wtg in ship.dots:
            for wtgx, wtgy in nears:
                cur = Dot(wtg.x + wtgx, wtg.y + wtgy)
                if not (self.out(cur)) and cur not in self.busy:
                    if verb:
                        self.field[cur.x][cur.y] = "."
                    self.busy.append(cur)

    def shot(self, wtg):
        if self.out(wtg):
            raise BoardOutException()

        if wtg in self.busy:
            raise BoardTwiceException()

        self.busy.append(wtg)

        for ship in self.ships:
            if wtg in ship.dots:
                ship.hp -= 1
                self.field[wtg.x][wtg.y] = "X"
                if ship.hp == 0:
                    self.count += 1
                    self.contour(ship, verb=True)
                    print("        Fatality!")
                    return False
                else:
                    print("       Есть пробитие!")
                    return True

        self.field[wtg.x][wtg.y] = "."
        print("        Промазал:(")
        return False

    def continuee(self):
        self.busy = []


class Gamer:
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy

    def ask(self):
        raise NotImplementedError()

    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except Exception as e:
                print(e)


class Bot(Gamer):
    def ask(self):
        d = Dot(randint(0, 5), randint(0, 5))
        print(f": {d.x + 1} {d.y + 1}")
        return d


class User(Gamer):
    def ask(self):
        while True:
            cords = input(": ").split()

            if len(cords) != 2:
                print(" Введите 2 координаты! ")
                continue

            x, y = cords

            if not (x.isdigit()) or not (y.isdigit()):
                print(" Введите числа! ")
                continue

            x, y = int(x), int(y)

            return Dot(x - 1, y - 1)


class Game:
    def __init__(self, size=6):
        self.size = size
        gm = self.random_board()
        bt = self.random_board()
        bt.hid = True

        self.ai = Bot(bt, gm)
        self.us = User(gm, bt)

    def random_board(self):
        board = None
        while board is None:
            board = self.random_place()
        return board

    def random_place(self):
        lens = [3, 2, 2, 1, 1, 1, 1]
        board = Board(size=self.size)
        attempts = 0
        for l in lens:
            while True:
                attempts += 1
                if attempts > 2000:
                    return None
                ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), l, randint(0, 1))
                try:
                    board.add_ship(ship)
                    break
                except BoardWrongShipException:
                    pass
        board.continuee()
        return board

    def greet(self):
        print("---------------------------")
        print("        Морской бой    ")
        print("---------------------------")
        print("     формат ввода: x y ")
        print("     x - номер строки  ")
        print("     y - номер столбца ")

    def loop(self):
        num = 0
        while True:
            print("-" * 27)
            print("       Поле игрока:")
            print(self.us.board)
            print("-" * 27)
            print("        Поле бота:")
            print(self.ai.board)
            if num % 2 == 0:
                print("-" * 27)
                print("           Ходи!")
                repeat = self.us.move()
            else:
                print("-" * 27)
                print("         Ходит бот")
                repeat = self.ai.move()
            if repeat:
                num -= 1

            if self.ai.board.count == 7:
                print("-" * 20)
                print("         Victory!")
                break

            if self.us.board.count == 7:
                print("-" * 20)
                print("    GG! Бот тебя переиграл!")
                break
            num += 1

    def start(self):
        self.greet()
        self.loop()


g = Game()
g.start()
